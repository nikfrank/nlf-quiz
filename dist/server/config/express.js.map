{"version":3,"sources":["../../../server/config/express.js"],"names":["app","env","get","set","config","root","engine","require","renderFile","use","bodyParser","urlencoded","extended","json","secret","secrets","session","saveUninitialized","resave","store","Store","sqldb","sequelize","csrf","angular","xframe","hsts","maxAge","includeSubDomains","preload","xssProtection","path","join","express","static"],"mappings":"AAAA;;;;AAIA;;;;;;kBAkBe,UAASA,GAAT,EAAc;AAC3B,MAAIC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAV;;AAEAF,MAAIG,GAAJ,CAAQ,OAAR,EAAiBC,sBAAOC,IAAP,GAAc,eAA/B;AACAL,MAAIM,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;AACAR,MAAIG,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAH,MAAIS,GAAJ,CAAQ,4BAAR;AACAT,MAAIS,GAAJ,CAAQC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAZ,MAAIS,GAAJ,CAAQC,qBAAWG,IAAX,EAAR;AACAb,MAAIS,GAAJ,CAAQ,+BAAR;AACAT,MAAIS,GAAJ,CAAQ,6BAAR;;AAEA;AACA;AACA;AACAT,MAAIS,GAAJ,CAAQ,8BAAQ;AACdK,YAAQV,sBAAOW,OAAP,CAAeC,OADT;AAEdC,uBAAmB,IAFL;AAGdC,YAAQ,KAHM;AAIdC,WAAO,IAAIC,KAAJ,CAAUC,gBAAMC,SAAhB;AAJO,GAAR,CAAR;;AAOA;;;;AAIA,MAAI,WAAWrB,GAAf,EAAoB;AAClBD,QAAIS,GAAJ,CAAQ,qBAAM;AACZc,YAAM;AACJC,iBAAS;AADL,OADM;AAIZC,cAAQ,YAJI;AAKZC,YAAM;AACJC,gBAAQ,QADJ,EACc;AAClBC,2BAAmB,IAFf;AAGJC,iBAAS;AAHL,OALM;AAUZC,qBAAe;AAVH,KAAN,CAAR;AAYD;;AAED9B,MAAIG,GAAJ,CAAQ,SAAR,EAAmB4B,eAAKC,IAAL,CAAU5B,sBAAOC,IAAjB,EAAuB,QAAvB,CAAnB;;AAEA,MAAI,iBAAiBJ,GAArB,EAA0B;AACxBD,QAAIS,GAAJ,CAAQ,4BAAQsB,eAAKC,IAAL,CAAU5B,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACAL,QAAIS,GAAJ,CAAQwB,kBAAQC,MAAR,CAAelC,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,QAAIS,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACD;;AAED,MAAI,kBAAkBR,GAAtB,EAA2B;AACzBD,QAAIS,GAAJ,CAAQF,QAAQ,oBAAR,GAAR;AACD;;AAED,MAAI,kBAAkBN,GAAlB,IAAyB,WAAWA,GAAxC,EAA6C;AAC3CD,QAAIS,GAAJ,CAAQwB,kBAAQC,MAAR,CAAeH,eAAKC,IAAL,CAAU5B,sBAAOC,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACAL,QAAIS,GAAJ,CAAQwB,kBAAQC,MAAR,CAAelC,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,QAAIS,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAT,QAAIS,GAAJ,CAAQ,6BAAR,EAJ2C,CAIlB;AAC1B;AACF,C;;AA3ED;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAIW,QAAQ,uCAAwBJ,yBAAQI,KAAhC,CAAZ","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\nimport lusca from 'lusca';\nimport config from './environment';\nimport session from 'express-session';\nimport sqldb from '../sqldb';\nimport expressSequelizeSession from 'express-sequelize-session';\nvar Store = expressSequelizeSession(session.Store);\n\nexport default function(app) {\n  var env = app.get('env');\n\n  app.set('views', config.root + '/server/views');\n  app.engine('html', require('ejs').renderFile);\n  app.set('view engine', 'html');\n  app.use(compression());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(cookieParser());\n\n  // Persist sessions with MongoStore / sequelizeStore\n  // We need to enable sessions for passport-twitter because it's an\n  // oauth 1.0 strategy, and Lusca depends on sessions\n  app.use(session({\n    secret: config.secrets.session,\n    saveUninitialized: true,\n    resave: false,\n    store: new Store(sqldb.sequelize)\n  }));\n\n  /**\n   * Lusca - express server security\n   * https://github.com/krakenjs/lusca\n   */\n  if ('test' !== env) {\n    app.use(lusca({\n      csrf: {\n        angular: true\n      },\n      xframe: 'SAMEORIGIN',\n      hsts: {\n        maxAge: 31536000, //1 year, in seconds\n        includeSubDomains: true,\n        preload: true\n      },\n      xssProtection: true\n    }));\n  }\n\n  app.set('appPath', path.join(config.root, 'client'));\n\n  if ('production' === env) {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n    app.use(express.static(app.get('appPath')));\n    app.use(morgan('dev'));\n  }\n\n  if ('development' === env) {\n    app.use(require('connect-livereload')());\n  }\n\n  if ('development' === env || 'test' === env) {\n    app.use(express.static(path.join(config.root, '.tmp')));\n    app.use(express.static(app.get('appPath')));\n    app.use(morgan('dev'));\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n}\n"]}