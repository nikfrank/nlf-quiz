{"version":3,"sources":["../../../server/config/express.js"],"names":[],"mappings":";;;;AAIA;;;;;;kBAkBe,UAAS,GAAT,EAAc;AAC3B,MAAI,MAAM,IAAI,GAAJ,CAAQ,KAAR,CAAN,CADuB;;AAG3B,MAAI,GAAJ,CAAQ,OAAR,EAAiB,sBAAO,IAAP,GAAc,eAAd,CAAjB,CAH2B;AAI3B,MAAI,MAAJ,CAAW,MAAX,EAAmB,QAAQ,KAAR,EAAe,UAAf,CAAnB,CAJ2B;AAK3B,MAAI,GAAJ,CAAQ,aAAR,EAAuB,MAAvB,EAL2B;AAM3B,MAAI,GAAJ,CAAQ,4BAAR,EAN2B;AAO3B,MAAI,GAAJ,CAAQ,qBAAW,UAAX,CAAsB,EAAE,UAAU,KAAV,EAAxB,CAAR,EAP2B;AAQ3B,MAAI,GAAJ,CAAQ,qBAAW,IAAX,EAAR,EAR2B;AAS3B,MAAI,GAAJ,CAAQ,+BAAR,EAT2B;AAU3B,MAAI,GAAJ,CAAQ,6BAAR;;;;;AAV2B,KAe3B,CAAI,GAAJ,CAAQ,8BAAQ;AACd,YAAQ,sBAAO,OAAP,CAAe,OAAf;AACR,uBAAmB,IAAnB;AACA,YAAQ,KAAR;AACA,WAAO,IAAI,KAAJ,CAAU,gBAAM,SAAN,CAAjB;GAJM,CAAR;;;;;;AAf2B,MA0BvB,WAAW,GAAX,EAAgB;AAClB,QAAI,GAAJ,CAAQ,qBAAM;AACZ,YAAM;AACJ,iBAAS,IAAT;OADF;AAGA,cAAQ,YAAR;AACA,YAAM;AACJ,gBAAQ,QAAR;AACA,2BAAmB,IAAnB;AACA,iBAAS,IAAT;OAHF;AAKA,qBAAe,IAAf;KAVM,CAAR,EADkB;GAApB;;AAeA,MAAI,GAAJ,CAAQ,SAAR,EAAmB,eAAK,IAAL,CAAU,sBAAO,IAAP,EAAa,QAAvB,CAAnB,EAzC2B;;AA2C3B,MAAI,iBAAiB,GAAjB,EAAsB;AACxB,QAAI,GAAJ,CAAQ,4BAAQ,eAAK,IAAL,CAAU,sBAAO,IAAP,EAAa,QAAvB,EAAiC,aAAjC,CAAR,CAAR,EADwB;AAExB,QAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,IAAI,GAAJ,CAAQ,SAAR,CAAf,CAAR,EAFwB;AAGxB,QAAI,GAAJ,CAAQ,sBAAO,KAAP,CAAR,EAHwB;GAA1B;;AAMA,MAAI,kBAAkB,GAAlB,EAAuB;AACzB,QAAI,GAAJ,CAAQ,QAAQ,oBAAR,GAAR,EADyB;GAA3B;;AAIA,MAAI,kBAAkB,GAAlB,IAAyB,WAAW,GAAX,EAAgB;AAC3C,QAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,eAAK,IAAL,CAAU,sBAAO,IAAP,EAAa,MAAvB,CAAf,CAAR,EAD2C;AAE3C,QAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,IAAI,GAAJ,CAAQ,SAAR,CAAf,CAAR,EAF2C;AAG3C,QAAI,GAAJ,CAAQ,sBAAO,KAAP,CAAR,EAH2C;AAI3C,QAAI,GAAJ,CAAQ,6BAAR;AAJ2C,GAA7C;CArDa;;AAhBf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAI,QAAQ,uCAAwB,yBAAQ,KAAR,CAAhC","file":"express.js","sourcesContent":["/**\r\n * Express configuration\r\n */\r\n\r\n'use strict';\r\n\r\nimport express from 'express';\r\nimport favicon from 'serve-favicon';\r\nimport morgan from 'morgan';\r\nimport compression from 'compression';\r\nimport bodyParser from 'body-parser';\r\nimport methodOverride from 'method-override';\r\nimport cookieParser from 'cookie-parser';\r\nimport errorHandler from 'errorhandler';\r\nimport path from 'path';\r\nimport lusca from 'lusca';\r\nimport config from './environment';\r\nimport session from 'express-session';\r\nimport sqldb from '../sqldb';\r\nimport expressSequelizeSession from 'express-sequelize-session';\r\nvar Store = expressSequelizeSession(session.Store);\r\n\r\nexport default function(app) {\r\n  var env = app.get('env');\r\n\r\n  app.set('views', config.root + '/server/views');\r\n  app.engine('html', require('ejs').renderFile);\r\n  app.set('view engine', 'html');\r\n  app.use(compression());\r\n  app.use(bodyParser.urlencoded({ extended: false }));\r\n  app.use(bodyParser.json());\r\n  app.use(methodOverride());\r\n  app.use(cookieParser());\r\n\r\n  // Persist sessions with MongoStore / sequelizeStore\r\n  // We need to enable sessions for passport-twitter because it's an\r\n  // oauth 1.0 strategy, and Lusca depends on sessions\r\n  app.use(session({\r\n    secret: config.secrets.session,\r\n    saveUninitialized: true,\r\n    resave: false,\r\n    store: new Store(sqldb.sequelize)\r\n  }));\r\n\r\n  /**\r\n   * Lusca - express server security\r\n   * https://github.com/krakenjs/lusca\r\n   */\r\n  if ('test' !== env) {\r\n    app.use(lusca({\r\n      csrf: {\r\n        angular: true\r\n      },\r\n      xframe: 'SAMEORIGIN',\r\n      hsts: {\r\n        maxAge: 31536000, //1 year, in seconds\r\n        includeSubDomains: true,\r\n        preload: true\r\n      },\r\n      xssProtection: true\r\n    }));\r\n  }\r\n\r\n  app.set('appPath', path.join(config.root, 'client'));\r\n\r\n  if ('production' === env) {\r\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\r\n    app.use(express.static(app.get('appPath')));\r\n    app.use(morgan('dev'));\r\n  }\r\n\r\n  if ('development' === env) {\r\n    app.use(require('connect-livereload')());\r\n  }\r\n\r\n  if ('development' === env || 'test' === env) {\r\n    app.use(express.static(path.join(config.root, '.tmp')));\r\n    app.use(express.static(app.get('appPath')));\r\n    app.use(morgan('dev'));\r\n    app.use(errorHandler()); // Error handler - has to be last\r\n  }\r\n}\r\n"]}